/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rallyTestExecutorPkg;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.DeleteRequest;
import com.rallydev.rest.request.QueryRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.DeleteResponse;
import com.rallydev.rest.response.QueryResponse;
import com.rallydev.rest.util.Fetch;
import com.rallydev.rest.util.QueryFilter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import static rallyTestExecutorPkg.TestCaseUploader.restApi;

/**
 *
 * @author cpandit
 */
public class Form_UploadTestCaseForm extends javax.swing.JFrame {
    
    ApplicationGlobals globals = new ApplicationGlobals();
    String host = globals.host;//"https://rally1.rallydev.com";
    String strAPIKey = globals.strAPIKey; //"_oQn2Zs9IQMavLxZtz3F0j75piRIWk0IZrKDCDr1nCHE"; // Cisco Rally workspace
    // "_zHt27zWNTwedqD1OgiKH9q0LnypiTkAIgZnquizeg40"; //Personal Workspace
//"_oQn2Zs9IQMavLxZtz3F0j75piRIWk0IZrKDCDr1nCHE";//"_H1YAhp4RzCxWr2hZbOvOjXNU3CkHVk5JfMDo7KPM";
    //Use https://help.rallydev.com/rally-application-manager guide for generating API Keys
    //String strUser = "cpandit@cisco.com";
    //String username = "vkuruvan@cisco.com";
    //String password = "Nonveg!123";
    String wsapiVersion = globals.wsapiVersion;//"v2.0";
    //String projectRef = "/project/2222";      
    //String workspaceRef = "/workspace/11111"; 
    String applicationName = globals.applicationName;//"_UpdateTCR";//This API Caller Application
    ArrayList<String>allInsertedTestsRef = new ArrayList<>();
    /**
     * Creates new form UploadTestCaseForm
     */
    public Form_UploadTestCaseForm() {

        initComponents();
        this.pack();
        this.setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        log = new javax.swing.JTextArea();
        btnChangeAPIKey = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jProgressBar_TotalRowsCompleted = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Choose Excel Template");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        log.setEditable(false);
        log.setColumns(20);
        log.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        log.setRows(5);
        jScrollPane1.setViewportView(log);

        btnChangeAPIKey.setText("Change API Key");
        btnChangeAPIKey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeAPIKeyActionPerformed(evt);
            }
        });

        jButton2.setText("Delete uploaded tests");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 634, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnChangeAPIKey)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jProgressBar_TotalRowsCompleted, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(btnChangeAPIKey)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar_TotalRowsCompleted, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        new Thread(new Runnable() {
            @Override
            public void run() {
                /* log.setText("");
                JFileChooser fc = new JFileChooser();
                int returnVal = 0;//fc.showOpenDialog(null);//UNCOMMENT THIS LINE IN PROD

                ////COMMENT THESE 2 LINE IN PROD
                String fileName = "C:\\Users\\cpandit\\Documents\\Cisco\\Rally\\RallyTestExecutor\\RallyTestExecutor\\Test_Uploader_ExcelTemplate\\template.xlsx";
                File file = new File(fileName);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    //File file = fc.getSelectedFile(); //UNCOMMENT THIS LINE IN PROD
                    log.append("Opening: " + file.getName() + ".\n");
                    //String fileName = "C:\\Users\\cpandit\\Documents\\Cisco\\Rally\\RallyTestExecutor\\RallyTestExecutor\\Test_Uploader_ExcelTemplate\\template.xlsx";
                    //File file = new File(fileName);
                    readXLSXFile(file);
                } else {
                    log.append("Open command cancelled by user.");
                }*/

                log.setText("");
                JFileChooser fc = new JFileChooser();
                int returnVal = fc.showOpenDialog(null);//UNCOMMENT THIS LINE IN PROD

                ////COMMENT THESE 2 LINE IN PROD
                //String fileName = "C:\\Users\\cpandit\\Documents\\Cisco\\Rally\\RallyTestExecutor\\RallyTestExecutor\\Test_Uploader_ExcelTemplate\\template.xlsx";
                //File file = new File(fileName);
                if (returnVal == JFileChooser.APPROVE_OPTION) {
                    File file = fc.getSelectedFile(); //UNCOMMENT THIS LINE IN PROD
                    log.append("API Key : "+globals.getAPIKey ()+"\n");
                    log.append("Opening: " + file.getName() + ".\n");
                    //String fileName = "C:\\Users\\cpandit\\Documents\\Cisco\\Rally\\RallyTestExecutor\\RallyTestExecutor\\Test_Uploader_ExcelTemplate\\template.xlsx";
                    //File file = new File(fileName);
                    readXLSXFile(file);
                    log.append("Program completed.");
                } else {
                    log.append("Open command cancelled by user.");
                }
            }
        }).start();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnChangeAPIKeyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeAPIKeyActionPerformed
        // TODO add your handling code here:
        String newAPIKey = JOptionPane.showInputDialog("Enter API Key..");
        globals.setAPIKey(newAPIKey);
        this.strAPIKey = globals.getAPIKey();
        JOptionPane.showMessageDialog (null, "API Key set..");
    }//GEN-LAST:event_btnChangeAPIKeyActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
            jProgressBar_TotalRowsCompleted.setValue(0);
            log.setText("");
            /*
            https://rally1.rallydev.com/slm/webservice/v2.0/testcase/109122033620  
            https://rally1.rallydev.com/slm/webservice/v2.0/testcase/109121624632
            https://rally1.rallydev.com/slm/webservice/v2.0/testcase/109121111564
            https://rally1.rallydev.com/slm/webservice/v2.0/testcase/109120732904
            https://rally1.rallydev.com/slm/webservice/v2.0/testcase/109122031248
            https://rally1.rallydev.com/slm/webservice/v2.0/testcase/109121744464
            https://rally1.rallydev.com/slm/webservice/v2.0/testcase/109121623648
            

            _H1YAhp4RzCxWr2hZbOvOjXNU3CkHVk5JfMDo7KPM
            */
        new Thread(new Runnable() {
            @Override
            public void run() {
            log.append("\nUsing API Key..." + strAPIKey+"\n");
            for (int i = 0; i < allInsertedTestsRef.size(); i++) 
            {
                
                RallyRestApi restApi = null;
                String userRef = null;
                try {
                    restApi = new RallyRestApi(
                            new URI(host),
                            strAPIKey);
                    restApi.setWsapiVersion(wsapiVersion);
                    restApi.setApplicationName(applicationName);
                    //String objectRef = "https://rally1.rallydev.com/slm/webservice/v2.0/testcase/109122033620";
                    String objectRef = allInsertedTestsRef.get(i);
                    DeleteRequest deleteRequest = new DeleteRequest(objectRef);
                    DeleteResponse deleteResponse = restApi.delete(deleteRequest);
                    if (deleteResponse.wasSuccessful()) {
                        log.append("\nSuccessfully deleted..." + objectRef);
                    } else {
                        log.append("\nUnable to delete..." + objectRef);
                        String[] updateErrors;
                        updateErrors = deleteResponse.getErrors();
                        log.append("\nError");
                        for (int err = 0; err < updateErrors.length;err++) {
                            log.append(updateErrors[err] + "\n");
                        }
                    }
                } catch (URISyntaxException | IOException e) {
                    log.append("" + e.getLocalizedMessage() + "\n");
                    log.append("Unable to create connection...");
                }
            }
            
            }
        }).start();

        
    }//GEN-LAST:event_jButton2ActionPerformed

    public void readXLSXFile(File file) {

        //InputStream XlsxFileToRead = null;
        XSSFWorkbook workbook = null;
        try {
            //XlsxFileToRead = new FileInputStream(fileName);

            //Getting the workbook instance for xlsx file
            workbook = new XSSFWorkbook(file);

        } catch (FileNotFoundException e) {
            log.append("\n" + e.getMessage());
            System.out.println(e.getMessage());
        } catch (IOException e) {
            log.append("\n" + e.getMessage());
            System.out.println(e.getMessage());
        } catch (InvalidFormatException e) {
            log.append("\n" + e.getMessage());
            System.out.println(e.getMessage());
        } catch (Exception e) {
            log.append("\n" + e.getMessage());
            System.out.println(e.getMessage());
        }

        //getting the first sheet from the workbook using sheet name. 
        // We can also pass the index of the sheet which starts from '0'.
        log.append("\nFetching worksheet - 'Main'");
        if (workbook == null) {
            log.append("\nNo workbooks found...");
            return;
        }
        XSSFSheet sheet = workbook.getSheet("Main");

        XSSFRow row;
        XSSFCell cell;

        String strWorkspaceName = sheet.getRow(0).getCell(1).getStringCellValue();//"Cisco Information Technology";
        String strProjectName = sheet.getRow(1).getCell(1).getStringCellValue(); //"PSA-DPM";
        String strUserStoryNumber = sheet.getRow(2).getCell(1).getStringCellValue();//"US89611";
        String strTestFolder = sheet.getRow(4).getCell(1).getStringCellValue();//"TF15468";

        String strPriority = sheet.getRow(5).getCell(1).getStringCellValue();//Important
        String strMethod = sheet.getRow(6).getCell(1).getStringCellValue();//Manual
        String strType = sheet.getRow(7).getCell(1).getStringCellValue();//Progression
        String strOwner = sheet.getRow(8).getCell(1).getStringCellValue();//Progression

        log.append("\nstrWorkspaceName : " + strWorkspaceName);
        log.append("\nstrProjectName : " + strProjectName);
        log.append("\nstrUserStoryNumber : " + strUserStoryNumber);
        log.append("\nstrTestFolder : " + strTestFolder);
        log.append("\nstrPriority : " + strPriority);
        log.append("\nstrMethod : " + strMethod);
        log.append("\nstrType : " + strType);
        log.append("\nstrOwner : " + strOwner);
        log.append("\n");
        log.append("\n");
        log.append("Verifying these values exists in Rally...");
        log.append("\n");

        GetObject obj = new GetObject();

        //Get workspace reference
        String strWorkspaceRef = obj.udsGetObjectProperty(restApi,globals, "Workspace", "Name", strWorkspaceName, "_ref");
        //TimeUnit.SECONDS.sleep(3);
        if (strWorkspaceRef == null || strWorkspaceRef.contains("http") == false) {
            log.append("Unable to fetch Workspace with Name : " + strWorkspaceName);
            log.append("\n");
            return;
        } else {
            log.append("Found Workspace with Name : " + strWorkspaceName);
            log.append("\n");
        }

        //Get project ref
        String strProjectRef = obj.udsGetObjectProperty(restApi,globals, "Project", "Name", strProjectName, "_ref");
        //TimeUnit.SECONDS.sleep(3);
        if (strProjectRef == null || strProjectRef.contains("http") == false) {
            log.append("Unable to fetch project with Name : " + strProjectName);
            log.append("\n");
            return;
        } else {
            log.append("Found project with Name : " + strProjectName);
            log.append("\n");
        }

        //Fetch the user story ref
        String strWorkProductRef = obj.udsGetObjectProperty(restApi, globals,"hierarchicalrequirement", "FormattedID", strUserStoryNumber, "_ref");
        //TimeUnit.SECONDS.sleep(3);
        if (strWorkProductRef == null || strWorkProductRef.contains("http") == false) {
            log.append("Unable to fetch user story with # : " + strUserStoryNumber);
            log.append("\n");
            return;
        } else {
            log.append("Found user story with # : " + strUserStoryNumber);
            log.append("\n");
        }

        //Fetching Test folder
        String strTestFolderRef = null;
        if (strTestFolder != null && strTestFolder.toUpperCase().contains("N")) {
            strTestFolderRef = "";
            log.append("Test folder will not be considered for uploading...");
        } else {
            strTestFolderRef = obj.udsGetObjectProperty(restApi,globals, "TestFolder", "FormattedID", strTestFolder, "_ref");
            //TimeUnit.SECONDS.sleep(3);
            if (strTestFolderRef == null || strTestFolderRef.contains("http") == false) {
                log.append("Unable to fetch Test folder with # : " + strTestFolder);
                log.append("\n");
                return;
            } else {
                log.append("Found  Test folder with # : " + strTestFolder);
                log.append("\n");
            }
        }

        //Fetching user in rally system
        RallyRestApi restApi = null;
        String userRef = null;
        try {
            restApi = new RallyRestApi(
                    new URI(host),
                    strAPIKey
            /*username, password*/);
            //Read User ref
            QueryRequest userRequest = new QueryRequest("User");
            userRequest.setFetch(new Fetch("UserName", "Subscription", "DisplayName", "SubscriptionAdmin"));
            userRequest.setQueryFilter(new QueryFilter("UserName", "=", strOwner));
            QueryResponse userQueryResponse = restApi.query(userRequest);
            JsonArray userQueryResults = userQueryResponse.getResults();
            JsonElement userQueryElement = userQueryResults.get(0);
            JsonObject userQueryObject = userQueryElement.getAsJsonObject();
            userRef = userQueryObject.get("_ref").getAsString();
            System.out.println("userRef: " + userRef);
            System.out.println("Connecting to rally... Please wait");

            if (userRef != null && userRef.contains("http")) {
                log.append("Successfully fetched user : " + strOwner);
                log.append("\n");
            } else {
                log.append("Unable to fetch user : " + strOwner);
                log.append("\n");
                return;
            }
        } catch (URISyntaxException ex) {
            log.append("Unable to fetch user  : " + strOwner);
            log.append("\n");
            log.append(ex.getMessage());
            log.append("\n");
            return;
        } catch (IOException ex) {
            log.append("Unable to fetch user  : " + strOwner);
            log.append("\n");
            log.append(ex.getMessage());
            log.append("\n");
            return;
        }
        restApi.setWsapiVersion(wsapiVersion);
        restApi.setApplicationName(applicationName);

        log.append("\n");
        int iTotalRows = 0;
        //For Progress Bar calculation - getting the total rows
        Iterator totalRowsIterator = sheet.rowIterator();
       
        while (totalRowsIterator.hasNext()) {
            totalRowsIterator.next();
            System.out.println("iTotalRows: "+iTotalRows);
            iTotalRows++;
        }
        System.out.println("iTotalRows: "+iTotalRows);
        
        //For Progress Bar calculation
        
        //iterate from line 13 Onwards and loop through records till not null
        //Iterating all the rows in the sheet
        int iRowCount = 0;
        int iTestStepCount = 1;
        //int iColCount = 0;
        
        Iterator rows = sheet.rowIterator();
        String strTestCaseInsertRef = null;
        String strTestCaseID = null;
        while (rows.hasNext()) {
            iRowCount++;
            row = (XSSFRow) rows.next();
            
            //int diff = (iTotalRows - iRowCount);
            double iNewTotalRows = iTotalRows - 13;
            int diff = (int) ((iNewTotalRows) - (iRowCount - 13));
            double percentFactor =  100 / iNewTotalRows;
            double fProgressBarStatus =  diff * percentFactor;//diff * 1.428571; (diff / 70-13) * 100)
            int iProgressBarStatus = ( int ) fProgressBarStatus;
            //System.out.println(" iProgressBarStatus: "+iProgressBarStatus+" fProgressBarStatus "+fProgressBarStatus+" iTotalRows: "+iTotalRows+" iNewTotalRows "+iNewTotalRows+" iRowCount : "+iRowCount+" diff: "+diff+" percent "+percentFactor);
            iProgressBarStatus = Math.abs(iProgressBarStatus - 101);
            
            jProgressBar_TotalRowsCompleted.setValue(iProgressBarStatus);
            
            if (iRowCount < 13) {
                continue;
            }

            //sheet.getRow(iRowCount);//.getCell(1).getStringCellValue();//Progression
            XSSFCell xlsxTestID = row.getCell(0);
            XSSFCell xlsxTestName = row.getCell(1);
            XSSFCell xlsxDescription = row.getCell(2);
            XSSFCell xlsxStepCount = row.getCell(3);
            XSSFCell xlsxTestStepInput = row.getCell(4);
            XSSFCell xlsxActual = row.getCell(5);

            String strTestID = null;
            String strTestName = null;
            String strDescription = null;
            String strStepCount = null;
            String strTestStepInput = null;
            String strActual = null;

            if (xlsxTestID != null && xlsxTestID.getCellType() == XSSFCell.CELL_TYPE_STRING) {
                //log.append("\nTest " + xlsxTestID.getStringCellValue() + " - ");
                strTestID = xlsxTestID.getStringCellValue();
            } else if (xlsxTestID != null && xlsxTestID.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
                //log.append("\nTest " + xlsxTestID.getNumericCellValue() + " - ");
                strTestID = xlsxTestID.getNumericCellValue() + "";
            }

            if (xlsxTestName != null && xlsxTestName.getCellType() == XSSFCell.CELL_TYPE_STRING) {
                //log.append("" + xlsxTestName.getStringCellValue() + " || ");
                strTestName = xlsxTestName.getStringCellValue();
            } else if (xlsxTestName != null && xlsxTestName.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
                //log.append("" + xlsxTestName.getNumericCellValue() + " || ");
                strTestName = xlsxTestName.getNumericCellValue() + "";
            }

            if (xlsxDescription != null && xlsxDescription.getCellType() == XSSFCell.CELL_TYPE_STRING) {
                // log.append("" + xlsxDescription.getStringCellValue() + " \n");
                strDescription = xlsxDescription.getStringCellValue();
            } else if (xlsxDescription != null && xlsxDescription.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
                //log.append("" + xlsxDescription.getNumericCellValue() + " \n");
                strDescription = xlsxDescription.getNumericCellValue() + "";
            }

            if (xlsxTestStepInput.getCellType() == XSSFCell.CELL_TYPE_STRING) {
                //log.append("" + xlsxTestStepInput.getStringCellValue() + " ||");
                strTestStepInput = xlsxTestStepInput.getStringCellValue();
            } else if (xlsxTestStepInput.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
                //log.append("" + xlsxTestStepInput.getNumericCellValue() + " ||");
                strTestStepInput = xlsxTestStepInput.getStringCellValue() + "";
            }

            if (xlsxActual.getCellType() == XSSFCell.CELL_TYPE_STRING) {
                //log.append("" + xlsxActual.getStringCellValue() + " ||\n");
                strActual = xlsxActual.getStringCellValue();
            } else if (xlsxActual.getCellType() == XSSFCell.CELL_TYPE_NUMERIC) {
                //log.append("" + xlsxActual.getNumericCellValue() + " ||\n");
                strActual = xlsxActual.getStringCellValue() + "";
            }
            /*
            if (strTestStepInput == null && strTestStepInput.equalsIgnoreCase("null")
                    && strActual == null && strActual.equalsIgnoreCase("null")
                   && strTestName == null && strTestName.equalsIgnoreCase("null")
                    && strDescription == null &&strDescription.equalsIgnoreCase("null")) {
                continue;
            }*/

            if ((strTestStepInput == null || strTestStepInput.equalsIgnoreCase("null"))
                    && (strActual == null || strActual.equalsIgnoreCase("null"))) {
                log.append("Fetching next row..\n\n");
                continue;
            } else if (strTestName != null && strTestName.equalsIgnoreCase("null") == false) {
                iTestStepCount = 0;
                iTestStepCount++;
                log.append("Test " + strTestName + " || " + strDescription);
                        
                
                strTestCaseInsertRef
                        = udsInsertTestCase (
                                strTestName,
                                strDescription,
                                strWorkspaceRef,
                                strProjectRef,
                                strWorkProductRef,
                                strTestFolderRef,
                                userRef,
                                strPriority,
                                strMethod);
                if (strTestCaseInsertRef != null && strTestCaseInsertRef.contains("http")) {

                    allInsertedTestsRef.add(strTestCaseInsertRef);
                    log.append("Inserted Testcase - strTestCaseInsertRef: " + strTestCaseInsertRef + "\n");
                    log.append("\nInserting test + step..:");
                    log.append(iTestStepCount + " " + strTestStepInput + "||" + strActual + " ||\n");

                    strTestCaseID = obj.udsGetObjectProperty(restApi, globals,"TestCase", "FormattedID", strTestCaseInsertRef, "_ref");

                    boolean rc = udsInsertTestStep(
                            strWorkspaceRef,
                            strWorkProductRef,
                            strTestCaseID,
                            strTestCaseInsertRef,
                            iTestStepCount + "",
                            strTestStepInput,
                            strActual);

                    if (rc == false) {
                        System.out.println("Unable to insert test step...");
                        return;
                    }
                } else {
                    log.append("Unable to insert Testcase - strTestCaseInsertRef: " + strTestCaseInsertRef + "\n");
                    //return;
                }

            } else if (strTestName == null || strTestName.equalsIgnoreCase("null")) {

                log.append("Inserting step..: ");
                iTestStepCount++;
                log.append(iTestStepCount + " " + strTestStepInput + "||" + strActual + " ||\n");
                boolean rc = udsInsertTestStep(
                        strWorkspaceRef,
                        strWorkProductRef,
                        strTestCaseID,
                        strTestCaseInsertRef,
                        iTestStepCount + "",
                        strTestStepInput,
                        strActual);

                if (rc == false) {
                    System.out.println("Unable to insert test step...");
                    return;
                }
            }
        }
    }

    public String udsInsertTestCase(
            String strTestName,
            String strDescription,
            String strWorkspaceRef,
            String strProjectNameRef,
            String strUserStoryWorkProdRef,
            String strTestFolderRef,
            String strUserRef,
            String strPriority,
            String strMethod
    ) {
        String strTestReference = null;
        System.out.println("***************Adding Test************");
        try {
            //Add a Test Case Result    
            System.out.println("Creating Test Case...");

            JsonObject newTestObj = new JsonObject();
            //String strName = "Verify some serious Test " + i + " one more";
            //newTestCaseResult.addProperty("Date", getCurrentDate("yyyy-M-d") + "T" + getCurrentDate("HH:mm:ss") + ".000Z");
            newTestObj.addProperty("Workspace", strWorkspaceRef);//"https://rally1.rallydev.com/slm/webservice/v2.0/workspace/23724738313");
            newTestObj.addProperty("Project", strProjectNameRef);//"https://rally1.rallydev.com/slm/webservice/v2.0/project/54060543237");
            newTestObj.addProperty("WorkProduct", strUserStoryWorkProdRef);//"https://rally1.rallydev.com/slm/webservice/v2.0/hierarchicalrequirement/93718171368");
            if (strTestFolderRef != null && strTestFolderRef.equalsIgnoreCase("") == false) {
                newTestObj.addProperty("TestFolder", strTestFolderRef);
            }
            newTestObj.addProperty("Owner", strUserRef);//Reference of user
            newTestObj.addProperty("Priority", strPriority);//"Important");
            newTestObj.addProperty("PreConditions", "NA");
            newTestObj.addProperty("Method", strMethod);//"Manual");
            newTestObj.addProperty("Name", strTestName);
            newTestObj.addProperty("Description", strDescription);//"My Test Description");

            //newTestObj.addProperty("Tester", userRef);
            // newTestCaseResult.addProperty("TestCase", "testRef");
            //newTestCaseResult.addProperty("Workspace", workspaceRef);
            //CreateRequest createRequest = new CreateRequest("testcaseresult", newTestCaseResult);
            RallyRestApi restApi = null;
            log.append(strAPIKey);
            restApi = new RallyRestApi(
                    new URI(host),
                    strAPIKey
            /*username, password*/);
            restApi.setWsapiVersion(wsapiVersion);
            restApi.setApplicationName(applicationName);

            CreateRequest createRequest = new CreateRequest("testcase", newTestObj);
            CreateResponse createResponse = restApi.create(createRequest);
            if (createResponse.wasSuccessful()) {
                String strTestID = createResponse.getObject().get("FormattedID").getAsString();
                strTestReference = createResponse.getObject().get("_ref").getAsString();
                log.append(String.format(" PASSED : Created %s %s", strTestID, createResponse.getObject().get("_ref").getAsString()));
            } else {
                log.append(" FAILED : Unable to upload testcase for : " + strTestName + "strTestReference : ");
                String[] updateErrors;
                updateErrors = createResponse.getErrors();
                log.append("Error");
                for (int i = 0; i < updateErrors.length; i++) {
                    log.append(updateErrors[i]+"\n");
                }
                return null;
            }

        } catch (Exception e) {
            log.append("Error in uploading... ");
            log.append(e.getMessage());
            e.printStackTrace();
            return null;
        }
        return strTestReference;
    }

    public boolean udsInsertTestStep(
            String strWorkspaceRef,
            String strWorkProductRef,
            String strTestCaseID,
            String strTestCaseRef,
            String strStepIndex,
            String strInput,
            String strExpected
    ) {
        try {
            boolean rc = false;
            //String strWorkspaceName = "Cisco Information Technology";
            //String strProjectName = "PSA-DPM";
            //String strTestCaseID = "TC277017";
            //GetObject obj = new GetObject();

            if (strTestCaseRef == null || strTestCaseRef.contains("http") == false) {
                System.out.print("Unable to find test case...");
            } else {
                try {
                    //Add a Test Case Result    

                    JsonObject newTestObj = new JsonObject();
                    //newTestCaseResult.addProperty("Date", getCurrentDate("yyyy-M-d") + "T" + getCurrentDate("HH:mm:ss") + ".000Z");
                    newTestObj.addProperty("Workspace", strWorkspaceRef);
                    newTestObj.addProperty("WorkProduct", strWorkProductRef);
                    newTestObj.addProperty("TestCase", strTestCaseRef);
                    newTestObj.addProperty("StepIndex", strStepIndex);
                    newTestObj.addProperty("Input", strInput);
                    newTestObj.addProperty("ExpectedResult", strExpected);//Reference of user
                    //newTestObj.addProperty("Tester", userRef);
                    // newTestCaseResult.addProperty("TestCase", "testRef");
                    //newTestCaseResult.addProperty("Workspace", workspaceRef);
                    RallyRestApi restApi = null;
                    restApi = new RallyRestApi(
                            new URI(host),
                            strAPIKey
                    /*username, password*/);
                    restApi.setWsapiVersion(wsapiVersion);
                    restApi.setApplicationName(applicationName);
                    //CreateRequest createRequest = new CreateRequest("testcaseresult", newTestCaseResult);
                    CreateRequest createRequest = new CreateRequest("TestCaseStep", newTestObj);
                    CreateResponse createResponse = restApi.create(createRequest);
                    if (createResponse.wasSuccessful()) {
                        log.append(String.format("PASSED : %s || %s || %s", createResponse.getObject().get("StepIndex").getAsString(), createResponse.getObject().get("Input").getAsString(), createResponse.getObject().get("ExpectedResult").getAsString()));
                        rc = true;
                    } else {
                        log.append("FAILED : Unable to upload testcase step for : " + strTestCaseID);
                        String[] updateErrors;
                        updateErrors = createResponse.getErrors();
                        log.append("Error");
                        for (int i = 0; i < updateErrors.length; i++) {
                            log.append(updateErrors[i]+"\n");
                        }
                        log.append("strAPIKey: "+strAPIKey);
                        return false;
                    }
                    log.append("strAPIKey: "+strAPIKey);
                } catch (Exception e) {
                    System.out.println("Error in uploading...");
                    e.printStackTrace();
                    return false;
                }

            }
            return rc;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    /*
    public static void main(String[] args) {
        ExcelFileReadWrite readXlsx = new ExcelFileReadWrite();
        String fileName = "C:\\Users\\cpandit\\Documents\\Cisco\\Rally\\RallyTestExecutor\\RallyTestExecutor\\Test_Uploader_ExcelTemplate\\template.xlsx";
        File file = new File(fileName);
        readXlsx.readXLSXFile(file);

    }*/
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form_UploadTestCaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form_UploadTestCaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form_UploadTestCaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form_UploadTestCaseForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form_UploadTestCaseForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnChangeAPIKey;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JProgressBar jProgressBar_TotalRowsCompleted;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea log;
    // End of variables declaration//GEN-END:variables
}
