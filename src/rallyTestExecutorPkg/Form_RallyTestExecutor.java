/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rallyTestExecutorPkg;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.rallydev.rest.RallyRestApi;
import com.rallydev.rest.request.CreateRequest;
import com.rallydev.rest.request.QueryRequest;
import com.rallydev.rest.response.CreateResponse;
import com.rallydev.rest.response.QueryResponse;
import com.rallydev.rest.util.Fetch;
import com.rallydev.rest.util.QueryFilter;
import java.awt.Toolkit;
import java.io.IOException;
import java.io.PrintStream;
import java.net.URI;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author cpandit
 */
public class Form_RallyTestExecutor extends javax.swing.JFrame {

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnTrigger = new javax.swing.JButton();
        btnValidateData = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaTestcaseIDs = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaConsoleOutput = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        strStatusMessage = new javax.swing.JLabel();
        btnPullTestcaseID = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        strBuildNameTextBox = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        strNotesTextbox = new javax.swing.JTextField();
        strAPIKeyTextbox = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        strTestedByTextbox = new javax.swing.JTextField();
        jProgressBar1 = new javax.swing.JProgressBar();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Upload_Tests_In_Rally = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rally Tests Executor");
        setMaximizedBounds(new java.awt.Rectangle(731, 563, 563, 563));
        setMaximumSize(new java.awt.Dimension(731, 563));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btnTrigger.setText("Execute and Pass Testcases");
        btnTrigger.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTriggerMouseClicked(evt);
            }
        });
        btnTrigger.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                btnTriggerStateChanged(evt);
            }
        });
        btnTrigger.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTriggerActionPerformed(evt);
            }
        });

        btnValidateData.setText("Upload Testcases");
        btnValidateData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidateDataActionPerformed(evt);
            }
        });

        txtAreaTestcaseIDs.setColumns(20);
        txtAreaTestcaseIDs.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        txtAreaTestcaseIDs.setRows(5);
        txtAreaTestcaseIDs.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAreaTestcaseIDsKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(txtAreaTestcaseIDs);

        textAreaConsoleOutput.setColumns(20);
        textAreaConsoleOutput.setFont(new java.awt.Font("Consolas", 0, 12)); // NOI18N
        textAreaConsoleOutput.setRows(5);
        jScrollPane2.setViewportView(textAreaConsoleOutput);

        jLabel1.setText("Console Output");

        jLabel2.setText("Enter text separated with commas");

        jLabel3.setText("Eg : TC456,TC455,TC124");

        jLabel4.setText("Authored by - Chirag Pandit");

        strStatusMessage.setText("Cisco Systems - Inc. Use of this system is restricted to authorized personnel only");

        btnPullTestcaseID.setText("Pull Testcase IDs");
        btnPullTestcaseID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPullTestcaseIDActionPerformed(evt);
            }
        });

        jLabel5.setText("Test IDs");

        strBuildNameTextBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strBuildNameTextBoxActionPerformed(evt);
            }
        });

        jLabel6.setText("Build");

        jLabel7.setText("Notes");

        strAPIKeyTextbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strAPIKeyTextboxActionPerformed(evt);
            }
        });

        jLabel8.setText("API key (* a valid Rally API Key. Dont change this value if not sure)");

        jLabel9.setText("V2.0");

        jLabel10.setText("Tested By");

        strTestedByTextbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                strTestedByTextboxActionPerformed(evt);
            }
        });

        jMenu1.setText("File");

        Upload_Tests_In_Rally.setText("Upload TestCases");
        Upload_Tests_In_Rally.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Upload_Tests_In_RallyActionPerformed(evt);
            }
        });
        jMenu1.add(Upload_Tests_In_Rally);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(strBuildNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(strStatusMessage)
                                .addGap(160, 160, 160)
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel4))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jScrollPane1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel2)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addComponent(jLabel10)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(strTestedByTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(strNotesTextbox)))
                                        .addGap(29, 29, 29))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(strAPIKeyTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnTrigger, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnPullTestcaseID, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnValidateData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(jScrollPane2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(0, 686, Short.MAX_VALUE))
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(strBuildNameTextBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel6))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(strTestedByTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel10)
                        .addComponent(btnPullTestcaseID)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(strNotesTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(strAPIKeyTextbox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnTrigger)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnValidateData)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(strStatusMessage)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnValidateDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidateDataActionPerformed
        // TODO add your handling code here:
        Form_UploadTestCaseForm form = new Form_UploadTestCaseForm(strAPIKeyTextbox.getText());
        form.setVisible(true);
    }//GEN-LAST:event_btnValidateDataActionPerformed

    private void txtAreaTestcaseIDsKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAreaTestcaseIDsKeyPressed
        // TODO add your handling code here:

    }//GEN-LAST:event_txtAreaTestcaseIDsKeyPressed

    public void udsPullLastTestCaseIDs(int limit) throws Exception {
        ApplicationGlobals globals = new ApplicationGlobals();
        String host = globals.host;//"https://rally1.rallydev.com";
        String strAPIKey = globals.strAPIKey; //"_oQn2Zs9IQMavLxZtz3F0j75piRIWk0IZrKDCDr1nCHE"; // Cisco Rally workspace
        // "_zHt27zWNTwedqD1OgiKH9q0LnypiTkAIgZnquizeg40"; //Personal Workspace
        //"_oQn2Zs9IQMavLxZtz3F0j75piRIWk0IZrKDCDr1nCHE";//"_H1YAhp4RzCxWr2hZbOvOjXNU3CkHVk5JfMDo7KPM";
        //Use https://help.rallydev.com/rally-application-manager guide for generating API Keys
        //String strUser = "cpandit@cisco.com";
        //String username = "vkuruvan@cisco.com";
        //String password = "Nonveg!123";
        String wsapiVersion = globals.wsapiVersion;//"v2.0";
        //String projectRef = "/project/2222";      
        //String workspaceRef = "/workspace/11111"; 
        String applicationName = globals.applicationName;//"_UpdateTCR";//This API Caller Application
/*
        // TODO Auto-generated method stub
        String host = "https://rally1.rallydev.com";
        //String username = "vkuruvan@cisco.com";
        //String password = "Nonveg!123";
        String wsapiVersion = "v2.0";
        //String projectRef = "/project/2222";      
        //String workspaceRef = "/workspace/11111"; 
        String applicationName = "_UpdateTCR";*/

        RallyRestApi restApi = new RallyRestApi(
                new URI(host),
                strAPIKey
        /*username,
				password*/);
        restApi.setWsapiVersion(wsapiVersion);
        restApi.setApplicationName(applicationName);

        //Read User
        QueryRequest userRequest = new QueryRequest("User");
        userRequest.setFetch(new Fetch("UserName", "Subscription", "DisplayName", "SubscriptionAdmin"));
        userRequest.setQueryFilter(new QueryFilter("UserName", "=", "vkuruvan@cisco.com"));
        userRequest.setOrder("_CreatedAt");

        QueryResponse userQueryResponse = restApi.query(userRequest);
        JsonArray userQueryResults = userQueryResponse.getResults();
        JsonElement userQueryElement = userQueryResults.get(0);
        JsonObject userQueryObject = userQueryElement.getAsJsonObject();
        String userRef = userQueryObject.get("_ref").getAsString();
        //System.out.println("userRef: "+userRef);

        //String strTestCaseIDs = "TC42948,TC42946";
        // Query for Test Case to which we want to add results
        QueryRequest testCaseRequest = new QueryRequest("TestCase");

        //will set the response limit to the patam passed...
        testCaseRequest.setLimit(limit);
        testCaseRequest.setFetch(new Fetch("FormattedID", "Name"));

        //testCaseRequest.setWorkspace(workspaceRef);
        QueryResponse testCaseQueryResponse = restApi.query(testCaseRequest);

        //Filter if necessarry
        //testCaseRequest.setQueryFilter(new QueryFilter("FormattedID", "=", "TC6"));
        //System.out.println("testCaseQueryResponse.getResults(): "+testCaseQueryResponse.getResults().size());
        //Dont uncomment - IMP - Will get all the testcases...
        String strTotalFormatterID = "";
        for (int i = testCaseQueryResponse.getResults().size() - 1; i > 0; i--) {
            //System.out.println(i+" testCaseQueryResponse "+testCaseQueryResponse.getResults().get(i));	

            JsonObject testCaseJsonObject = testCaseQueryResponse.getResults().get(i).getAsJsonObject();

            //"FormattedID":"TC43163","Name":"Submit Cost Forecast"
            String strFormattedID = testCaseQueryResponse.getResults().get(i).getAsJsonObject().get("FormattedID").getAsString();
            String strName = testCaseQueryResponse.getResults().get(i).getAsJsonObject().get("Name").getAsString();
            String testCaseRef = testCaseQueryResponse.getResults().get(i).getAsJsonObject().get("_ref").getAsString();

            //System.out.print("strFormattedID: "+strFormattedID+" ");
            //System.out.print("testCaseRef: "+testCaseRef+" ");
            //System.out.print("strName: "+strName);
            //System.out.println();
            strTotalFormatterID = strTotalFormatterID + "" + strFormattedID + ",";
            /*
			if (strFormattedID != null && strTestCaseIDs != null && 
					strTestCaseIDs.contains(strFormattedID))
			{
				System.err.println("Adding result for : "+strFormattedID);
				try 
				{
					//Add a Test Case Result    
					System.out.println(testCaseRef);
					System.out.println("Creating Test Case Result...");
					JsonObject newTestCaseResult = new JsonObject();
					newTestCaseResult.addProperty("Verdict", "Pass");
					newTestCaseResult.addProperty("Date", getCurrentDate("yyyy-M-d") +"T"+getCurrentDate("HH:mm:ss")+".000Z");
					newTestCaseResult.addProperty("Notes", "Test Passed");
					newTestCaseResult.addProperty("Build", "2.0");
					newTestCaseResult.addProperty("Tester", userRef);
					newTestCaseResult.addProperty("TestCase", testCaseRef);
					//newTestCaseResult.addProperty("Workspace", workspaceRef);

					CreateRequest createRequest = new CreateRequest("testcaseresult", newTestCaseResult);
					CreateResponse createResponse = restApi.create(createRequest);  
					if (createResponse.wasSuccessful()) 
					{

						System.err.println(String.format("PASSED : Created %s", createResponse.getObject().get("_ref").getAsString()));          

						//Read Test Case
						/*String ref = Ref.getRelativeRef(createResponse.getObject().get("_ref").getAsString());
						System.out.println(String.format("\nReading Test Case Result %s...", ref));
						GetRequest getRequest = new GetRequest(ref);
						getRequest.setFetch(new Fetch("Date", "Verdict"));
						GetResponse getResponse = restApi.get(getRequest);
						JsonObject obj = getResponse.getObject();
						System.out.println(String.format("my Read Test Case Result. Date = %s, Verdict = %s",
								obj.get("Date").getAsString(), obj.get("Verdict").getAsString()));      
					}
					else
					{
						System.err.println("FAILED : Unable to upload testcase result for : "+strFormattedID);
					}
				}
				catch (Exception e)
				{
					System.err.println("Error in uploading...");
					e.printStackTrace();
				}
				finally 
				{
					//Release all resources
					restApi.close();
				}
			
			}	*/
        }

        txtAreaTestcaseIDs.append(strTotalFormatterID);
        //System.err.println(strTotalFormatterID);

    }

    private void btnTriggerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTriggerActionPerformed
        if (txtAreaTestcaseIDs.getText() == null || txtAreaTestcaseIDs.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter testcase IDs..");
            return;
        }

        if (strBuildNameTextBox.getText() == null || strBuildNameTextBox.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter build name..");
            return;
        }

        if (strTestedByTextbox.getText() == null || strTestedByTextbox.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Please enter Tested By name..");
            return;
        }

        jProgressBar1.setVisible(true);
        jProgressBar1.setValue(50);

        new Thread(new Runnable() {

            @Override
            public void run() {

                RallyRestApi restApi = null;
                try {

                    PrintStream printStream = new PrintStream(new CustomOutputStream(textAreaConsoleOutput));
                    System.setOut(printStream);
                    System.setErr(printStream);

                    ApplicationGlobals globals = new ApplicationGlobals();
                    // TODO Auto-generated method stub
                    String host = globals.host;//"https://rally1.rallydev.com";
                    String strAPIKey = strAPIKeyTextbox.getText();//"_H1YAhp4RzCxWr2hZbOvOjXNU3CkHVk5JfMDo7KPM";
                    //Use https://help.rallydev.com/rally-application-manager guide for generating API Keys
                    strUser = strTestedByTextbox.getText();
                    //String username = "vkuruvan@cisco.com";
                    //String password = "Nonveg!123";
                    String wsapiVersion = globals.wsapiVersion;//"v2.0";
                    //String projectRef = "/project/2222";      
                    //String workspaceRef = "/workspace/11111"; 
                    String applicationName = globals.applicationName;//"_UpdateTCR";//This API Caller Application

                    String strOriginalCiscoMessage = strStatusMessage.getText();
                    strStatusMessage.setText("");
                    textAreaConsoleOutput.setText("");
                    strStatusMessage.setText("Connecting..." + host + " ");

                    restApi = new RallyRestApi(
                            new URI(host),
                            strAPIKey
                    /*username, password*/);
                    restApi.setWsapiVersion(wsapiVersion);
                    restApi.setApplicationName(applicationName);

                    //Read User
                    QueryRequest userRequest = new QueryRequest("User");
                    userRequest.setFetch(new Fetch("UserName", "Subscription", "DisplayName", "SubscriptionAdmin"));
                    userRequest.setQueryFilter(new QueryFilter("UserName", "=", strTestedByTextbox.getText().trim()));

                    QueryResponse userQueryResponse = restApi.query(userRequest);
                    JsonArray userQueryResults = userQueryResponse.getResults();
                    JsonElement userQueryElement = userQueryResults.get(0);
                    JsonObject userQueryObject = userQueryElement.getAsJsonObject();
                    String userRef = userQueryObject.get("_ref").getAsString();
                    printSystemLog("userRef: " + userRef);
                    printSystemLog("Connecting to rally for testcases... Please wait");

                    String strTestCaseIDs = txtAreaTestcaseIDs.getText();//"TC42948,TC42946";
                    ArrayList<String> testCaseIDsEntered = new ArrayList<>();
                    if (strTestCaseIDs.contains(",")) {
                        String[] arr = strTestCaseIDs.split(",");
                        for (int i = 0; i < arr.length; i++) {
                            testCaseIDsEntered.add(arr[i].toString());
                        }
                    } else {
                        testCaseIDsEntered.add(strTestCaseIDs);
                    }
                    // Query for Test Case to which we want to add results
                    QueryRequest testCaseRequest = new QueryRequest("TestCase");

                    //will set the response limit to the patam passed...
                    testCaseRequest.setLimit(10000);
                    testCaseRequest.setFetch(new Fetch("FormattedID", "Name"));

                    /*
                QueryFilter qf = new QueryFilter("FormattedID", ">", testCaseIDsEntered.get(0));
                testCaseRequest.setQueryFilter(qf);*/
                    //testCaseRequest.setWorkspace(workspaceRef);
                    new Thread(new Runnable() {

                        @Override
                        public void run() {
                            jProgressBar1.setVisible(true);
                            for (int i = 0; i < 100; i++) {
                                try {
                                    TimeUnit.MILLISECONDS.sleep(270);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(Form_RallyTestExecutor.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                jProgressBar1.setValue(i);
                            }
                        }
                    }).start();

                    QueryResponse testCaseQueryResponse = restApi.query(testCaseRequest);
                    if (testCaseQueryResponse == null) {
                        jProgressBar1.setValue(100);
                        jProgressBar1.setVisible(false);

                        //popup - cannot query
                        JOptionPane.showMessageDialog(null, "Query response is null..");
                    }
                    //Filter if necessarry
                    //testCaseRequest.setQueryFilter(new QueryFilter("FormattedID", "=", "TC6"));
                    printSystemLog("Total Testcases found in rally: " + testCaseQueryResponse.getResults().size());
                    //Dont uncomment - IMP - Will get all the testcases...
                    boolean rc = false;

                    for (int i = 0; i < testCaseQueryResponse.getResults().size(); i++) {
                        //printSystemLog(i+" testCaseQueryResponse "+testCaseQueryResponse.getResults().get(i));	

                        JsonObject testCaseJsonObject = testCaseQueryResponse.getResults().get(i).getAsJsonObject();

                        //"FormattedID":"TC43163","Name":"Submit Cost Forecast"
                        String strFormattedID = testCaseQueryResponse.getResults().get(i).getAsJsonObject().get("FormattedID").getAsString();
                        String strName = testCaseQueryResponse.getResults().get(i).getAsJsonObject().get("Name").getAsString();
                        String testCaseRef = testCaseQueryResponse.getResults().get(i).getAsJsonObject().get("_ref").getAsString();
                        //printSystemLog("strTestCaseIDs: "+strTestCaseIDs+" strFormattedID "+strFormattedID);

                        if (strTestCaseIDs == null) {
                            System.out.println("No testcase ID fetched...");
                            //printSystemLog("No testcase ID fetched...");
                            break;
                        }

                        if (strFormattedID != null
                                && testCaseIDsEntered.indexOf(strFormattedID.trim()) != -1) //strTestCaseIDs.contains(strFormattedID.trim())) 
                        {

                            //printSystemLog("strFormattedID: " + strFormattedID + " strName: " + strName);
                            //System.out.print("testCaseRef: "+testCaseRef+" ");
                            System.err.println("***************\nAdding result for : " + strFormattedID);
                            try {
                                //Add a Test Case Result    
                                printSystemLog(testCaseRef);
                                printSystemLog("Creating Test Case Result...");
                                JsonObject newTestCaseResult = new JsonObject();
                                newTestCaseResult.addProperty("Verdict", "Pass");
                                newTestCaseResult.addProperty("Date", getCurrentDate("yyyy-M-d") + "T" + getCurrentDate("HH:mm:ss") + ".000Z");
                                newTestCaseResult.addProperty("Notes", strNotesTextbox.getText().trim());
                                newTestCaseResult.addProperty("Build", strBuildNameTextBox.getText().trim());
                                newTestCaseResult.addProperty("Tester", userRef);
                                newTestCaseResult.addProperty("TestCase", testCaseRef);
                                //newTestCaseResult.addProperty("Workspace", workspaceRef);

                                CreateRequest createRequest = new CreateRequest("testcaseresult", newTestCaseResult);
                                CreateResponse createResponse = restApi.create(createRequest);
                                if (createResponse.wasSuccessful()) {

                                    printSystemLog(String.format("PASSED : Created %s", createResponse.getObject().get("_ref").getAsString()));
                                    rc = true;
                                    //Read Test Case
                                    /*String ref = Ref.getRelativeRef(createResponse.getObject().get("_ref").getAsString());
                                                    printSystemLog(String.format("\nReading Test Case Result %s...", ref));
                                                    GetRequest getRequest = new GetRequest(ref);
                                                    getRequest.setFetch(new Fetch("Date", "Verdict"));
                                                    GetResponse getResponse = restApi.get(getRequest);
                                                    JsonObject obj = getResponse.getObject();
                                                    printSystemLog(String.format("my Read Test Case Result. Date = %s, Verdict = %s",
                                                                    obj.get("Date").getAsString(), obj.get("Verdict").getAsString()));   */
                                } else {
                                    printSystemLog("FAILED : Unable to upload testcase result for : " + strFormattedID);

                                }

                            } catch (Exception e) {
                                printSystemLog("Error in uploading...");
                                e.printStackTrace();
                            } finally {
                                //Release all resources

                            }

                        } else {
                            //printSystemLog("Formatter ID is null...");
                            //break;
                        }

                    }
                    if (rc == true) {
                        printSystemLog("PASSED : Added..");
                        JOptionPane.showMessageDialog(null, "Successfully added tests in rally..");
                        jProgressBar1.setVisible(false);
                        jProgressBar1.setValue(0);
                    } else {
                        printSystemLog("Warn : Unable to find TC ID..");
                        JOptionPane.showMessageDialog(null, "No Testcase IDs found..");
                        jProgressBar1.setVisible(false);
                        jProgressBar1.setValue(0);
                    }
                    strStatusMessage.setText(strOriginalCiscoMessage);

                    /*
            JsonObject testCaseJsonObject = *///.get(0).getAsJsonObject();
                    //String testCaseRef = testCaseQueryResponse.getResults().get(0).getAsJsonObject().get("_ref").getAsString(); 
                } catch (Exception e) {

                    JOptionPane.showMessageDialog(null, "Error : " + e.getMessage());
                    jProgressBar1.setVisible(false);
                    jProgressBar1.setValue(0);
                    printSystemLog("Error in event handling...");
                    e.printStackTrace();
                } finally {
                    try {
                        restApi.close();
                    } catch (IOException ex) {
                        Logger.getLogger(Form_RallyTestExecutor.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        }).start();
        jProgressBar1.setValue(0);
        jProgressBar1.setVisible(false);
    }//GEN-LAST:event_btnTriggerActionPerformed

    public void printSystemLog(String strMessage) {
        System.out.println(strMessage);
        //textAreaConsoleOutput.append(strMessage);
    }

    private void btnTriggerMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTriggerMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_btnTriggerMouseClicked

    private void btnPullTestcaseIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPullTestcaseIDActionPerformed

        try {

            PrintStream printStream = new PrintStream(new CustomOutputStream(textAreaConsoleOutput));
            System.setOut(printStream);
            System.setErr(printStream);
            // TODO add your handling code here:
            String strLastTestID = JOptionPane.showInputDialog("Please enter last test case id from series");

            if (strLastTestID == null || strLastTestID.equalsIgnoreCase("")) {
                System.out.println("Please enter last test case id from series...");
            } else {
                String strStartTestID = txtAreaTestcaseIDs.getText();

                if (strStartTestID == null || strStartTestID.contains(",")) {
                    System.out.println("Please enter one value for Test...");
                } else {
                    strStartTestID = strStartTestID.replaceAll("TC", "");
                    strLastTestID = strLastTestID.replaceAll("TC", "");
                    try {
                        int iLastTest = Integer.parseInt(strLastTestID);
                        int iStartTest = Integer.parseInt(strStartTestID);
                        System.out.println("iLastTest: " + iLastTest);
                        System.out.println("iStartTest: " + iStartTest);
                        /*iLastTest: 520
                            iStartTest: 512*/
                        if (iStartTest < iLastTest) {
                            // udsPullLastTestCaseIDs(iLimit);
                            txtAreaTestcaseIDs.setText("");
                            String strTestsToBeAdded = "";
                            for (int i = iStartTest; i <= iLastTest; i++) {
                                if (i < iLastTest) {
                                    strTestsToBeAdded = strTestsToBeAdded + "TC" + i + ",";
                                } else {
                                    strTestsToBeAdded = strTestsToBeAdded + "TC" + i;
                                }
                            }
                            txtAreaTestcaseIDs.setText(strTestsToBeAdded);
                        } else {
                            System.out.println("Test Last limit < Test Start Limit");
                        }
                    } catch (Exception e) {
                        System.out.println("exception : Number cannot be parsed into integer...");
                    }
                }
            }

        } catch (Exception ex) {
            Logger.getLogger(Form_RallyTestExecutor.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnPullTestcaseIDActionPerformed

    private void strBuildNameTextBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strBuildNameTextBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_strBuildNameTextBoxActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:

    }//GEN-LAST:event_formWindowActivated

    private void strTestedByTextboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strTestedByTextboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_strTestedByTextboxActionPerformed

    private void strAPIKeyTextboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_strAPIKeyTextboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_strAPIKeyTextboxActionPerformed

    private void btnTriggerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_btnTriggerStateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_btnTriggerStateChanged

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:

        strAPIKeyTextbox.setText(stAPIKey);
        strBuildNameTextBox.setText(strBuildText);
        strNotesTextbox.setText("Functionality as expected...");
        strTestedByTextbox.setText(strUser);
    }//GEN-LAST:event_formWindowOpened

    private void Upload_Tests_In_RallyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Upload_Tests_In_RallyActionPerformed
        // TODO add your handling code here:
        Form_UploadTestCaseForm form = new Form_UploadTestCaseForm(strAPIKeyTextbox.getText());
        form.setVisible(true);
    }//GEN-LAST:event_Upload_Tests_In_RallyActionPerformed

    String strBuildText = "Build ID";
    String strUser = "YOUR_CEC_ID@cisco.com";
    String stAPIKey = "_H1YAhp4RzCxWr2hZbOvOjXNU3CkHVk5JfMDo7KPM";

    public static String getCurrentDate(String strDateFormat) {
        try {
            Calendar currentDate = Calendar.getInstance();
            if (strDateFormat == null || strDateFormat.equals("")) {
                strDateFormat = "dd/MMM/yyyy";
            }
            SimpleDateFormat formatter = new SimpleDateFormat(strDateFormat);
            String dateNow = formatter.format(currentDate.getTime());
            //System.out.println("Current Date: " + dateNow);
            return dateNow;

        } catch (Exception e) {
            System.out.println("Exception: " + e.getLocalizedMessage());
            return null;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }

            TimeUnit.SECONDS.sleep(2);
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Form_RallyTestExecutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Form_RallyTestExecutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Form_RallyTestExecutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Form_RallyTestExecutor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(Form_RallyTestExecutor.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Form_RallyTestExecutor().setVisible(true);
            }
        });

    }

    /**
     * Creates new form RallyTestExecutor
     */
    public Form_RallyTestExecutor() {

        //Trigger the frame
        initComponents();

        //Setting the application icon - splash screen in Project > Right Click > Run > VM Option > -splash:src/rallyTestExecutorPkg/icons/splash2.jpg
        this.pack();
        this.setLocationRelativeTo(null);
        this.setVisible(true);
        jProgressBar1.setVisible(false);
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("icons/icon2.png")));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Upload_Tests_In_Rally;
    private javax.swing.JButton btnPullTestcaseID;
    private javax.swing.JButton btnTrigger;
    private javax.swing.JButton btnValidateData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField strAPIKeyTextbox;
    private javax.swing.JTextField strBuildNameTextBox;
    private javax.swing.JTextField strNotesTextbox;
    private javax.swing.JLabel strStatusMessage;
    private javax.swing.JTextField strTestedByTextbox;
    private javax.swing.JTextArea textAreaConsoleOutput;
    private javax.swing.JTextArea txtAreaTestcaseIDs;
    // End of variables declaration//GEN-END:variables
}
